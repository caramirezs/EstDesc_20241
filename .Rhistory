cruz_cruz <- cruz_cruz + 1
}
}
# Mostrar los resultados
n0 <- cruz_cruz
n1 <- cara_cruz + cruz_cara
n2 <- cara_cara
cat('Total de eventos:', n, "\n")
cat("0: Evento que en dos lanzamientos no caiga ninguna cara ", n0, "\n")
cat("1: Evento que en dos lanzamientos caiga solo una cara ", n1, "\n")
cat("2: Evento que en dos lanzamientos caigan dos caras ", n2, "\n")
# Probabilidades
cat("P(0) ", n0/n, "\n")
cat("P(1) ", n1/n, "\n")
cat("P(2)", n2/n, "\n")
# Número de lanzamientos
n <- 100
# Contadores para cada resultado
cara_cara <- 0
cara_cruz <- 0
cruz_cara <- 0
cruz_cruz <- 0
# Definir los posibles resultados de un lanzamiento de moneda
opciones <- c("Cara", "Cruz")
# Realizar n lanzamientos
for(i in 1:n) {
# Simular el lanzamiento de dos monedas
lanzamiento <- sample(opciones, size = 2, replace = TRUE)
# Actualizar los contadores basados en los resultados
if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cara") {
cara_cara <- cara_cara + 1
} else if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cruz") {
cara_cruz <- cara_cruz + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cara") {
cruz_cara <- cruz_cara + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cruz") {
cruz_cruz <- cruz_cruz + 1
}
}
# Mostrar los resultados
n0 <- cruz_cruz
n1 <- cara_cruz + cruz_cara
n2 <- cara_cara
cat('Total de eventos:', n, "\n")
cat("0: Frecuencias del evento: dos lanzamientos no caiga ninguna cara ", n0, "\n")
cat("1: Frecuencias del evento: dos lanzamientos caiga solo una cara ", n1, "\n")
cat("2: Frecuencias del evento: dos lanzamientos caigan dos caras ", n2, "\n")
eventos <- c(0, 1, 2)
frecuencias <- c(n0, n1, n2)
media_muestral<- sum(eventos*frecuencias)/n
varianza_muestral <- sum(frecuencias * (eventos - media_muestral)^2) / n
desviacion_estandar_muestral <- sqrt(varianza_muestral)
cat("media muestral:", media_muestral, "desviacion estandar muestral:", desviacion_estandar_muestral, "\n")
# Probabilidades
cat("P(0) ", n0/n, "\n")
cat("P(1) ", n1/n, "\n")
cat("P(2)", n2/n, "\n")
# Número de lanzamientos
n <- 100
# Contadores para cada resultado
cara_cara <- 0
cara_cruz <- 0
cruz_cara <- 0
cruz_cruz <- 0
# Definir los posibles resultados de un lanzamiento de moneda
opciones <- c("Cara", "Cruz")
# Realizar n lanzamientos
for(i in 1:n) {
# Simular el lanzamiento de dos monedas
lanzamiento <- sample(opciones, size = 2, replace = TRUE)
# Actualizar los contadores basados en los resultados
if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cara") {
cara_cara <- cara_cara + 1
} else if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cruz") {
cara_cruz <- cara_cruz + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cara") {
cruz_cara <- cruz_cara + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cruz") {
cruz_cruz <- cruz_cruz + 1
}
}
# Mostrar los resultados
n0 <- cruz_cruz
n1 <- cara_cruz + cruz_cara
n2 <- cara_cara
cat('Total de eventos:', n, "\n")
cat("0: Frecuencias del evento: dos lanzamientos no caiga ninguna cara ", n0, "\n")
cat("1: Frecuencias del evento: dos lanzamientos caiga solo una cara ", n1, "\n")
cat("2: Frecuencias del evento: dos lanzamientos caigan dos caras ", n2, "\n")
eventos <- c(0, 1, 2)
frecuencias <- c(n0, n1, n2)
media_muestral<- sum(eventos*frecuencias)/n
varianza_muestral <- sum(frecuencias * (eventos - media_muestral)^2) / n
desviacion_estandar_muestral <- sqrt(varianza_muestral)
cat("media muestral:", media_muestral, "\ndesviacion estandar muestral:", desviacion_estandar_muestral, "\n")
# Probabilidades
cat("P(0) ", n0/n, "\n")
cat("P(1) ", n1/n, "\n")
cat("P(2)", n2/n, "\n")
# Número de lanzamientos
n <- 100
# Contadores para cada resultado
cara_cara <- 0
cara_cruz <- 0
cruz_cara <- 0
cruz_cruz <- 0
# Definir los posibles resultados de un lanzamiento de moneda
opciones <- c("Cara", "Cruz")
# Realizar n lanzamientos
for(i in 1:n) {
# Simular el lanzamiento de dos monedas
lanzamiento <- sample(opciones, size = 2, replace = TRUE)
# Actualizar los contadores basados en los resultados
if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cara") {
cara_cara <- cara_cara + 1
} else if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cruz") {
cara_cruz <- cara_cruz + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cara") {
cruz_cara <- cruz_cara + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cruz") {
cruz_cruz <- cruz_cruz + 1
}
}
# Mostrar los resultados
n0 <- cruz_cruz
n1 <- cara_cruz + cruz_cara
n2 <- cara_cara
cat('Total de eventos:', n, "\n")
cat("0: Frecuencias del evento: dos lanzamientos no caiga ninguna cara ", n0, "\n")
cat("1: Frecuencias del evento: dos lanzamientos caiga solo una cara ", n1, "\n")
cat("2: Frecuencias del evento: dos lanzamientos caigan dos caras ", n2, "\n")
eventos <- c(0, 1, 2)
frecuencias <- c(n0, n1, n2)
media_muestral<- sum(eventos*frecuencias)/n
varianza_muestral <- sum(frecuencias * (eventos - media_muestral)^2) / n
desviacion_estandar_muestral <- sqrt(varianza_muestral)
cat("media muestral:", media_muestral, "\ndesviacion estandar muestral:", desviacion_estandar_muestral, "\n")
# Probabilidades
print("Probabilidades por aproximación de frecuencias relativas ")
cat("P(0): ", n0/n, "\n")
cat("P(1): ", n1/n, "\n")
cat("P(2): ", n2/n, "\n")
# Número de lanzamientos
n <- 10000
# Contadores para cada resultado
cara_cara <- 0
cara_cruz <- 0
cruz_cara <- 0
cruz_cruz <- 0
# Definir los posibles resultados de un lanzamiento de moneda
opciones <- c("Cara", "Cruz")
# Realizar n lanzamientos
for(i in 1:n) {
# Simular el lanzamiento de dos monedas
lanzamiento <- sample(opciones, size = 2, replace = TRUE)
# Actualizar los contadores basados en los resultados
if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cara") {
cara_cara <- cara_cara + 1
} else if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cruz") {
cara_cruz <- cara_cruz + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cara") {
cruz_cara <- cruz_cara + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cruz") {
cruz_cruz <- cruz_cruz + 1
}
}
# Mostrar los resultados
n0 <- cruz_cruz
n1 <- cara_cruz + cruz_cara
n2 <- cara_cara
cat('Total de eventos:', n, "\n")
cat("0: Frecuencias del evento: dos lanzamientos no caiga ninguna cara ", n0, "\n")
cat("1: Frecuencias del evento: dos lanzamientos caiga solo una cara ", n1, "\n")
cat("2: Frecuencias del evento: dos lanzamientos caigan dos caras ", n2, "\n")
eventos <- c(0, 1, 2)
frecuencias <- c(n0, n1, n2)
media_muestral<- sum(eventos*frecuencias)/n
varianza_muestral <- sum(frecuencias * (eventos - media_muestral)^2) / n
desviacion_estandar_muestral <- sqrt(varianza_muestral)
cat("media muestral:", media_muestral, "\ndesviacion estandar muestral:", desviacion_estandar_muestral, "\n")
# Probabilidades
print("Probabilidades por aproximación de frecuencias relativas:")
cat("P(0): ", n0/n, "\n")
cat("P(1): ", n1/n, "\n")
cat("P(2): ", n2/n, "\n")
# Número de lanzamientos
n <- 10000
# Contadores para cada resultado
cara_cara <- 0
cara_cruz <- 0
cruz_cara <- 0
cruz_cruz <- 0
# Definir los posibles resultados de un lanzamiento de moneda
opciones <- c("Cara", "Cruz")
# Realizar n lanzamientos
for(i in 1:n) {
# Simular el lanzamiento de dos monedas
lanzamiento <- sample(opciones, size = 2, replace = TRUE)
# Actualizar los contadores basados en los resultados
if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cara") {
cara_cara <- cara_cara + 1
} else if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cruz") {
cara_cruz <- cara_cruz + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cara") {
cruz_cara <- cruz_cara + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cruz") {
cruz_cruz <- cruz_cruz + 1
}
}
# Mostrar los resultados
n0 <- cruz_cruz
n1 <- cara_cruz + cruz_cara
n2 <- cara_cara
cat('Total de eventos:', n, "\n")
cat("0: Frecuencias del evento: dos lanzamientos no caiga ninguna cara ", n0, "\n")
cat("1: Frecuencias del evento: dos lanzamientos caiga solo una cara ", n1, "\n")
cat("2: Frecuencias del evento: dos lanzamientos caigan dos caras ", n2, "\n")
eventos <- c(0, 1, 2)
frecuencias <- c(n0, n1, n2)
media_muestral<- sum(eventos*frecuencias)/n
varianza_muestral <- sum(frecuencias * (eventos - media_muestral)^2) / n
desviacion_estandar_muestral <- sqrt(varianza_muestral)
cat("media muestral:", media_muestral, "\ndesviacion estandar muestral:", desviacion_estandar_muestral, "\n")
# Probabilidades
cat("Probabilidades por aproximación de frecuencias relativas:\n")
cat("P(0): ", n0/n, "\n")
cat("P(1): ", n1/n, "\n")
cat("P(2): ", n2/n, "\n")
# Número de lanzamientos
n <- 10000
# Contadores para cada resultado
cara_cara <- 0
cara_cruz <- 0
cruz_cara <- 0
cruz_cruz <- 0
# Definir los posibles resultados de un lanzamiento de moneda
opciones <- c("Cara", "Cruz")
# Realizar n lanzamientos
for(i in 1:n) {
# Simular el lanzamiento de dos monedas
lanzamiento <- sample(opciones, size = 2, replace = TRUE)
# Actualizar los contadores basados en los resultados
if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cara") {
cara_cara <- cara_cara + 1
} else if(lanzamiento[1] == "Cara" && lanzamiento[2] == "Cruz") {
cara_cruz <- cara_cruz + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cara") {
cruz_cara <- cruz_cara + 1
} else if(lanzamiento[1] == "Cruz" && lanzamiento[2] == "Cruz") {
cruz_cruz <- cruz_cruz + 1
}
}
# Mostrar los resultados
n0 <- cruz_cruz
n1 <- cara_cruz + cruz_cara
n2 <- cara_cara
cat('Total de eventos:', n, "\n")
cat("0: Frecuencias del evento: dos lanzamientos no caiga ninguna cara ", n0, "\n")
cat("1: Frecuencias del evento: dos lanzamientos caiga solo una cara ", n1, "\n")
cat("2: Frecuencias del evento: dos lanzamientos caigan dos caras ", n2, "\n")
eventos <- c(0, 1, 2)
frecuencias <- c(n0, n1, n2)
media_muestral<- sum(eventos*frecuencias)/n
varianza_muestral <- sum(frecuencias * (eventos - media_muestral)^2) / (n-1)
desviacion_estandar_muestral <- sqrt(varianza_muestral)
cat("media muestral:", media_muestral, "\ndesviacion estandar muestral:", desviacion_estandar_muestral, "\n\n")
# Probabilidades
cat("Probabilidades por aproximación de frecuencias relativas:\n")
cat("P(0): ", n0/n, "\n")
cat("P(1): ", n1/n, "\n")
cat("P(2): ", n2/n, "\n")
(factorial(460)/(factorial(460-252)*factorial(252))) * 0.5^252 * 0.5^(460-252)
choose(460, 252) * 0.5^252 * 0.5^(460-252)
n <- 450
x <- 252
choose(n, x) * 0.5^x * 0.5^(n-x)
n <- 460
x <- 252
choose(n, x) * 0.5^x * 0.5^(n-x)
n <- 460
x <- 230
choose(n, x) * 0.5^x * 0.5^(n-x)
n <- 10
x <- 5
choose(n, x) * 0.5^x * 0.5^(n-x)
x <- 6
choose(n, x) * 0.5^x * 0.5^(n-x)
x <- 7
choose(n, x) * 0.5^x * 0.5^(n-x)
x <- 8
choose(n, x) * 0.5^x * 0.5^(n-x)
x <- 9
choose(n, x) * 0.5^x * 0.5^(n-x)
x <- 10
choose(n, x) * 0.5^x * 0.5^(n-x)
n <- 10
for(x in 5:n) {
prob <- choose(n, x) * 0.5^x * 0.5^(n-x)
cat("Probabilidad de que exactamente", x, "lanzamientos sean cara: ", prob, "\n")
}
n <- 10
sum_prob <- 0
for(x in 5:n) {
prob <- choose(n, x) * 0.5^x * 0.5^(n-x)
sum_prob <-suma_probabilidades + prob
cat("Probabilidad de que exactamente", x, "lanzamientos sean cara: ", prob, "\n")
}
n <- 10
sum_prob <- 0
for(x in 5:n) {
prob <- choose(n, x) * 0.5^x * 0.5^(n-x)
sum_prob <- sum_prob + prob
cat("Probabilidad de que exactamente", x, "lanzamientos sean cara: ", prob, "\n")
}
cat("Probabilidad de al menos", x, "lanzamientos sean cara: ", sum_prob, "\n")
n <- 100
sum_prob <- 0
for(x in 50:n) {
prob <- choose(n, x) * 0.5^x * 0.5^(n-x)
sum_prob <- sum_prob + prob
cat("Probabilidad de que exactamente", x, "lanzamientos sean cara: ", prob, "\n")
}
cat("Probabilidad de al menos", x, "lanzamientos sean cara: ", sum_prob, "\n")
n <- 10
sum_prob <- 0
for(x in 6:n) {
prob <- choose(n, x) * 0.5^x * 0.5^(n-x)
sum_prob <- sum_prob + prob
cat("Probabilidad de que exactamente", x, "lanzamientos sean cara: ", prob, "\n")
}
cat("Probabilidad de al menos", x, "lanzamientos sean cara: ", sum_prob, "\n")
n <- 10
d <- 5
sum_prob <- 0
for(x in d:n) {
prob <- choose(n, x) * 0.5^x * 0.5^(n-x)
sum_prob <- sum_prob + prob
cat("Probabilidad de que exactamente", x, "lanzamientos sean cara: ", prob, "\n")
}
cat("Probabilidad de al menos", d, "lanzamientos sean cara: ", sum_prob, "\n")
n <- 10
d <- 5
p <- 0.5
sum_prob <- 0
for(x in d:n) {
prob <- choose(n, x) * 0.5^x * (1-0.5)^(n-x)
sum_prob <- sum_prob + prob
cat("Probabilidad de que exactamente", x, "lanzamientos sean cara: ", prob, "\n")
}
cat("Probabilidad de al menos", d, "lanzamientos sean cara: ", sum_prob, "\n")
# Parámetros
n <- 10
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(4, size = n, prob = p)
# Parámetros
n <- 10
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(4, size = n, prob = p)
prob_menos_de_5
# Parámetros
n <- 10
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(4, size = n, prob = p)
prob_al_menos_5 <- 1 - prob_menos_de_5
# Mostrar resultado
prob_al_menos_5
dbinom(5:10, size=10, prob=0.5)
print(dbinom(5:10, size=10, prob=0.5))
print(sum(dbinom(5:10, size=10, prob=0.5))
print(dbinom(5:10, size=10, prob=0.5))
print(sum(dbinom(5:10, size=10, prob=0.5)))
print(qbinom(5:10, size=10, prob=0.5))
print(qbinom(5, size=10, prob=0.5))
print(pbinom(5, size=10, prob=0.5))
print(pbinom(5, size=10, prob=0.5)) # P[X<=5]: 5 exitos o menos
print(pbinom(5, size=10, prob=0.5)) # P[X<=5]: 5 exitos o menos
print(pbinom(4, size=10, prob=0.5, lower.tail = TRUE)) # P[X>4] 4 exitos o más
print(pbinom(5, size=10, prob=0.5)) # P[X<=5]: 5 exitos o menos
print(pbinom(4, size=10, prob=0.5, lower.tail = FALSE)) # P[X>4] 4 exitos o más
# Parámetros
n <- 1000
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(4, size = n, prob = p)
prob_al_menos_5 <- 1 - prob_menos_de_5
# Mostrar resultado
prob_al_menos_5
# Parámetros
n <- 100
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(10, size = n, prob = p)
prob_al_menos_5 <- 1 - prob_menos_de_5
# Mostrar resultado
prob_al_menos_5
# Parámetros
n <- 100
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(50, size = n, prob = p)
prob_al_menos_5 <- 1 - prob_menos_de_5
# Mostrar resultado
prob_al_menos_5
# Parámetros
n <- 100
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(20, size = n, prob = p)
prob_al_menos_5 <- 1 - prob_menos_de_5
# Mostrar resultado
prob_al_menos_5
# Parámetros
n <- 100
p <- 0.5
# Calcular la probabilidad de obtener menos de 5 caras (es decir, 0 a 4)
prob_menos_de_5 <- pbinom(20, size = n, prob = p)
# Parámetros
n <- 100
p <- 0.5
prob_menos_de_5 <- pbinom(20, size = n, prob = p)
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
prob_menos_de_5 <- pbinom(30, size = n, prob = p)
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
prob_menos_de_5 <- pbinom(40, size = n, prob = p)
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 40
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 30
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 35
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 55
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 56
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 57
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 57
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
-1prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 57
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
1-prob_menos_de_5
# Parámetros
n <- 100
p <- 0.5
x <- 60
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
1-prob_menos_de_5
# Parámetros
n <- 460
p <- 0.5
x <- 252
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
1-prob_menos_de_5
# Parámetros
n <- 460
p <- 0.5
x <- 252
prob_menos_de_5 <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
prob_menos_de_5
# Parámetros
n <- 460
p <- 0.5
x <- 252
prob_menos_de <- pbinom(x, size = n, prob = p) # P[X<=x]: x éxitos o menos
1- prob_menos_de
# Parámetros
n <- 460
p <- 0.5
x <- 252
prob_menos_de <- pbinom(x-1, size = n, prob = p) # P[X<=x]: x éxitos o menos
1- prob_menos_de
