setwd("C:/Users/caramirezs/My Drive/PUJ/Esta(6102)/[01] RStudio")
setwd("C:/Users/caramirezs/My Drive/PUJ/Esta(6102)/[01] RStudio")
info_estudiantes <- read_csv("[01] RStudio/[01] Conjunto de datos/kaggle/NY-House-Dataset.csv")
require(readxl)
info_estudiantes <- read_csv("[01] RStudio/[01] Conjunto de datos/kaggle/NY-House-Dataset.csv")
require(readxl)
info_estudiantes <- read.csv("[01] RStudio/[01] Conjunto de datos/kaggle/NY-House-Dataset.csv")
require(readxl)
info_estudiantes <- read.csv("/[01] RStudio/[01] Conjunto de datos/kaggle/NY-House-Dataset.csv")
require(readxl)
info_estudiantes <- read.csv("[01] Conjunto de datos/kaggle/NY-House-Dataset.csv")
View(info_estudiantes)
require(readxl)
info_House <- read.csv("[01] Conjunto de datos/kaggle/NY-House-Dataset.csv")
NY_House_df <- data.frame(info_House)
require(readxl)
info_House <- read.csv("[01] Conjunto de datos/kaggle/NY-House-Dataset.csv")
NY_House_df <- data.frame(info_House)
View(NY_House_df)
table(NY_House_df$TYPE)
table(NY_House_df$TYPE)
library("RColorBrewer")
barplot(table(tabla_est_df$Carrera), main="Número de estudiantes por carrera",
xlab="Carreras", ylab="Número de estudiantes",
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F)
table(NY_House_df$TYPE)
library("RColorBrewer")
barplot(table(NY_House_df$TYPE), main="Número de estudiantes por carrera",
xlab="Carreras", ylab="Número de estudiantes",
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F)
pie(table(NY_House_df$TYPE),col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
tabla_frec_type = sort(tabla_frecuencia, decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Número de estudiantes por carrera",
xlab="Carreras", ylab="Número de estudiantes",
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Número de estudiantes por carrera",
xlab="Carreras", ylab="Número de estudiantes",
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Número de estudiantes por carrera",
xlab="Carreras", ylab="Número de estudiantes",las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas",las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas",las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F,
xpd = TRUE)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas", las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F,
xpd = TRUE)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
par(mar = c(5, 4, 4, 2) + 0.1)
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas", las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F,
xpd = TRUE)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
par(mar = c(5, 4, 4, 2) + 1.1)
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas", las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F,
xpd = TRUE)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas", las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F,
xpd = TRUE)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas", las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = T,
xpd = TRUE)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
sort(table(NY_House_df$TYPE), decreasing = TRUE)
tabla_frec_type <- sort(table(NY_House_df$TYPE), decreasing = TRUE)
library("RColorBrewer")
barplot(tabla_frec_type, main="Tipo de viviendas en NY",
xlab="Type", ylab="Número de viviendas", las=2,
cex.names=0.7, cex.lab=0.9, cex.main=0.9, col=rainbow(7), horiz = F,
xpd = TRUE)
pie(tabla_frec_type,col=rainbow(7), border=F,main="Diagrama circular estudiantes",
radius=1)
View(NY_House_df)
View(info_House)
View(NY_House_df)
View(info_House)
View(NY_House_df)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
length(NY_House_df$PRICE)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
{min_val, max_val, length(NY_House_df$PRICE)}
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
c(min_val, max_val, length(NY_House_df$PRICE))
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- 1 + log(length(NY_House_df$PRICE), 2)
print(n_int)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
print(n_int)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
print(n_int)
anchura <- rango/n_int
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(n_int, anchura)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = n_int)  # 11 puntos de corte para crear 5 intervalos
breaks
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1)  # 11 puntos de corte para crear 5 intervalos
breaks
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))  # 11 puntos de corte para crear 5 intervalos
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE, dig.lab = 8)
intervalos
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
intervalos
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
# Ver los intervalos creados
table(intervalos)
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(valores))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
# Ver los intervalos creados
table(intervalos)
# Encontrar los dos valores máximos en la lista
max_valores <- tail(sort(mi_lista), 2)
# Encontrar los dos valores máximos en la lista
max_valores <- tail(sort(valores), 2)
new_valores <- valores[!valores %in% max_valores]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
# Ver los intervalos creados
table(intervalos)
# Encontrar los dos valores máximos en la lista
max_valores <- tail(sort(valores), 2)
new_valores <- valores[!valores %in% max_valores]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
# Ver los intervalos creados
table(intervalos)
# Calcular la frecuencia de los intervalos
frecuencia_intervalos <- table(intervalos)
# Crear el gráfico de barras
barplot(frecuencia_intervalos,
main="Gráfico de Barras de Intervalos",
xlab="Intervalos",
ylab="Frecuencia",
col=rainbow(length(frecuencia_intervalos)))
# Agregar etiquetas a las barras
text(barplot(frecuencia_intervalos), frecuencia_intervalos + 1, frecuencia_intervalos, pos = 3)
# Crear el histograma
hist(new_valores,
breaks = breaks,  # Utiliza los mismos intervalos que calculaste anteriormente
main = "Histograma de Valores",
xlab = "Valores",
ylab = "Frecuencia",
col = "skyblue",  # Color de las barras
border = "black",  # Color del borde de las barras
xlim = c(min(new_valores), max(new_valores)))  # Establece el rango en el eje x
# Establecer opciones para evitar la notación científica
options(scipen = 999)
# Crear el histograma
hist(new_valores,
breaks = breaks,  # Utiliza los mismos intervalos que calculaste anteriormente
main = "Histograma de Valores",
xlab = "Valores",
ylab = "Frecuencia",
col = "skyblue",  # Color de las barras
border = "black",  # Color del borde de las barras
xlim = c(min(new_valores), max(new_valores)))  # Establece el rango en el eje x
# Calcular las frecuencias acumuladas a partir de los datos del histograma
frecuencia_acumulada <- cumsum(counts)
# Obtener los valores de las barras del histograma
counts <- hist(new_valores, breaks = breaks, plot = FALSE)$counts
# Calcular las frecuencias acumuladas a partir de los datos del histograma
frecuencia_acumulada <- cumsum(counts)
# Crear la ojiva
plot(breaks[-length(breaks)], frecuencia_acumulada, type = "s",
main = "Ojiva",
xlab = "Valores",
ylab = "Frecuencia Acumulada",
col = "blue")
# Agregar una línea de referencia en el eje x
abline(h = max(frecuencia_acumulada), col = "red", lty = 2)
# Etiquetar la línea de referencia
text(25, max(frecuencia_acumulada), "Valor Máximo", pos = 2, col = "red")
# Calcular las frecuencias de los datos
frecuencia <- table(new_valores)
# Ordenar los datos por frecuencia en orden descendente
frecuencia_ordenada <- sort(frecuencia, decreasing = TRUE)
# Calcular las frecuencias acumuladas
frecuencia_acumulada <- cumsum(frecuencia_ordenada)
# Crear el histograma
histograma <- hist(datos,
breaks = length(unique(datos)),
plot = FALSE)
# Calcular las frecuencias de los datos
frecuencia <- table(new_valores)
# Ordenar los datos por frecuencia en orden descendente
frecuencia_ordenada <- sort(frecuencia, decreasing = TRUE)
# Calcular las frecuencias acumuladas
frecuencia_acumulada <- cumsum(frecuencia_ordenada)
# Crear el histograma
histograma <- hist(new_valores,
breaks = length(unique(datos)),
plot = FALSE)
# Calcular las frecuencias de los datos
frecuencia <- table(new_valores)
# Ordenar los datos por frecuencia en orden descendente
frecuencia_ordenada <- sort(frecuencia, decreasing = TRUE)
# Calcular las frecuencias acumuladas
frecuencia_acumulada <- cumsum(frecuencia_ordenada)
# Crear el histograma
histograma <- hist(new_valores,
breaks = length(unique(new_valores)),
plot = FALSE)
# Crear el gráfico de barras ordenadas
barplot(frecuencia_ordenada,
main = "Diagrama de Pareto",
xlab = "Causas",
ylab = "Frecuencia",
col = "skyblue",
border = "black")
# Agregar las etiquetas de las causas en el gráfico
text(barplot(frecuencia_ordenada), frecuencia_ordenada + 1, names(frecuencia_ordenada), pos = 3)
# Agregar una línea de referencia en el eje y (frecuencia acumulada)
abline(h = frecuencia_acumulada, col = "red", lty = 2)
# Etiquetar la línea de referencia
text(max(barplot(frecuencia_ordenada)), frecuencia_acumulada, "Frecuencia Acumulada", pos = 4, col = "red")
