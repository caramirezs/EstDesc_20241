# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(NY_House_df$PRICE))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
valores = NY_House_df$PRICE
# Definir los puntos de corte para 5 intervalos
min_val <- min(valores)
max_val <- max(valores)
rango <- max_val - min_val
c(min_val, max_val, length(valores))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(NY_House_df$PRICE), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
max_valor <- max(valores)
new_valores <- valores[valores != max_valor]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
# Ver los intervalos creados
table(intervalos)
# Encontrar los dos valores máximos en la lista
max_valores <- tail(sort(mi_lista), 2)
# Encontrar los dos valores máximos en la lista
max_valores <- tail(sort(valores), 2)
new_valores <- valores[!valores %in% max_valores]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
# Ver los intervalos creados
table(intervalos)
# Encontrar los dos valores máximos en la lista
max_valores <- tail(sort(valores), 2)
new_valores <- valores[!valores %in% max_valores]
# Definir los puntos de corte para 5 intervalos
min_val <- min(new_valores)
max_val <- max(new_valores)
rango <- max_val - min_val
c(min_val, max_val, length(new_valores))
n_int <- ceiling(1 + log(length(new_valores), 2))
anchura <- rango/n_int
print(c(n_int, anchura))
breaks <- seq(from = min_val, to = max_val, length.out = (n_int+1))
breaks
# Crear los intervalos
intervalos <- cut(valores, breaks, include.lowest = TRUE)
# Ver los intervalos creados
table(intervalos)
# Calcular la frecuencia de los intervalos
frecuencia_intervalos <- table(intervalos)
# Crear el gráfico de barras
barplot(frecuencia_intervalos,
main="Gráfico de Barras de Intervalos",
xlab="Intervalos",
ylab="Frecuencia",
col=rainbow(length(frecuencia_intervalos)))
# Agregar etiquetas a las barras
text(barplot(frecuencia_intervalos), frecuencia_intervalos + 1, frecuencia_intervalos, pos = 3)
# Crear el histograma
hist(new_valores,
breaks = breaks,  # Utiliza los mismos intervalos que calculaste anteriormente
main = "Histograma de Valores",
xlab = "Valores",
ylab = "Frecuencia",
col = "skyblue",  # Color de las barras
border = "black",  # Color del borde de las barras
xlim = c(min(new_valores), max(new_valores)))  # Establece el rango en el eje x
# Establecer opciones para evitar la notación científica
options(scipen = 999)
# Crear el histograma
hist(new_valores,
breaks = breaks,  # Utiliza los mismos intervalos que calculaste anteriormente
main = "Histograma de Valores",
xlab = "Valores",
ylab = "Frecuencia",
col = "skyblue",  # Color de las barras
border = "black",  # Color del borde de las barras
xlim = c(min(new_valores), max(new_valores)))  # Establece el rango en el eje x
# Calcular las frecuencias acumuladas a partir de los datos del histograma
frecuencia_acumulada <- cumsum(counts)
# Obtener los valores de las barras del histograma
counts <- hist(new_valores, breaks = breaks, plot = FALSE)$counts
# Calcular las frecuencias acumuladas a partir de los datos del histograma
frecuencia_acumulada <- cumsum(counts)
# Crear la ojiva
plot(breaks[-length(breaks)], frecuencia_acumulada, type = "s",
main = "Ojiva",
xlab = "Valores",
ylab = "Frecuencia Acumulada",
col = "blue")
# Agregar una línea de referencia en el eje x
abline(h = max(frecuencia_acumulada), col = "red", lty = 2)
# Etiquetar la línea de referencia
text(25, max(frecuencia_acumulada), "Valor Máximo", pos = 2, col = "red")
# Calcular las frecuencias de los datos
frecuencia <- table(new_valores)
# Ordenar los datos por frecuencia en orden descendente
frecuencia_ordenada <- sort(frecuencia, decreasing = TRUE)
# Calcular las frecuencias acumuladas
frecuencia_acumulada <- cumsum(frecuencia_ordenada)
# Crear el histograma
histograma <- hist(datos,
breaks = length(unique(datos)),
plot = FALSE)
# Calcular las frecuencias de los datos
frecuencia <- table(new_valores)
# Ordenar los datos por frecuencia en orden descendente
frecuencia_ordenada <- sort(frecuencia, decreasing = TRUE)
# Calcular las frecuencias acumuladas
frecuencia_acumulada <- cumsum(frecuencia_ordenada)
# Crear el histograma
histograma <- hist(new_valores,
breaks = length(unique(datos)),
plot = FALSE)
# Calcular las frecuencias de los datos
frecuencia <- table(new_valores)
# Ordenar los datos por frecuencia en orden descendente
frecuencia_ordenada <- sort(frecuencia, decreasing = TRUE)
# Calcular las frecuencias acumuladas
frecuencia_acumulada <- cumsum(frecuencia_ordenada)
# Crear el histograma
histograma <- hist(new_valores,
breaks = length(unique(new_valores)),
plot = FALSE)
# Crear el gráfico de barras ordenadas
barplot(frecuencia_ordenada,
main = "Diagrama de Pareto",
xlab = "Causas",
ylab = "Frecuencia",
col = "skyblue",
border = "black")
# Agregar las etiquetas de las causas en el gráfico
text(barplot(frecuencia_ordenada), frecuencia_ordenada + 1, names(frecuencia_ordenada), pos = 3)
# Agregar una línea de referencia en el eje y (frecuencia acumulada)
abline(h = frecuencia_acumulada, col = "red", lty = 2)
# Etiquetar la línea de referencia
text(max(barplot(frecuencia_ordenada)), frecuencia_acumulada, "Frecuencia Acumulada", pos = 4, col = "red")
# Etiquetar la línea de referencia
text(25, max(frecuencia_acumulada), "Valor Máximo", pos = 2, col = "red")
library(readxl)
Airport_Data_Speeds <- read_excel("[01] Conjunto de datos/Otros/32 - Airport Data Speeds.xlsx")
Airport_df <- Data.frame(Airport_Data_Speeds)
library(readxl)
Airport_Data_Speeds <- read_excel("[01] Conjunto de datos/Otros/32 - Airport Data Speeds.xlsx")
Airport_df <- data.frame(Airport_Data_Speeds)
Airport_df
View(Airport_Data_Speeds)
Airport_df$VERIZON
Airport_df$VERIZON.mean()
mean(Airport_df$VERIZON)
mean(Airport_df$VERIZON, Airport_df$SPRINT)
apply(Airport_df,mean)
apply(Airport_df,FUN=mean)
apply(Airport_df, 4, FUN=mean)
apply(Airport_df, 4, mean)
apply(Airport_df, 5, mean)
apply(Airport_df, 4, mean)
apply(Airport_df[,1:5], 4, mean)
Airport_df[,1:5]
Airport_df[,2:5]
apply(Airport_df[,2:5], 4, mean)
dim(Airport_df[,2:5])
apply(Airport_df[,2:5], c(50,4), mean)
apply(Airport_df[,2:5], 50:4, mean)
apply(Airport_df[,2:5], 2:5, mean)
apply(Airport_df, 2:5, mean)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], mode, na.rm = TRUE)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda, na.rm = TRUE)
moda <- function(x) {
# Crea una tabla de frecuencias para x
tabla <- table(x)
# Encuentra el valor más frecuente
moda <- names(tabla[tabla == max(tabla)])
# Devuelve la moda
# Si hay más de una moda, devuelve todas
if(length(moda) > 1) {
return(as.numeric(moda))
} else {
return(as.numeric(moda))
}
}
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda, na.rm = TRUE)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], function(x) moda(x))
)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], moda(x))
)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], moda)
)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
)
nombres_companias <- colnames(Airport_df)[2:5]
nombres_companias
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
)
nombres_companias <- colnames(Airport_df)[2:5]
nombres_companias
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
)
nombres_companias <- colnames(Airport_df)[2:5]
nombres_companias
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
library(readxl)
Airport_Data_Speeds <- read_excel("[01] Conjunto de datos/Otros/32 - Airport Data Speeds.xlsx")
Airport_df <- data.frame(Airport_Data_Speeds)
Airport_df
moda <- function(x) {
# Crea una tabla de frecuencias para x
tabla <- table(x)
# Encuentra el valor más frecuente
moda <- names(tabla[tabla == max(tabla)])
# Devuelve la moda
# Si hay más de una moda, devuelve todas
if(length(moda) > 1) {
return(as.numeric(moda))
} else {
return(as.numeric(moda))
}
}
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
moda <- function(x) {
# Crea una tabla de frecuencias para x
tabla <- table(x)
# Encuentra el valor más frecuente
moda <- names(tabla[tabla == max(tabla)])
# Devuelve la moda
# Si hay más de una moda, devuelve todas
if(length(moda) > 1) {
return(as.numeric(moda))
} else {
return(as.numeric(moda))
}
}
nombres_companias <- colnames(Airport_df)[2:5]
nombres_companias
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], moda(x))
)
nombres_companias <- colnames(Airport_df)[2:5]
nombres_companias
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], moda)
)
nombres_companias <- colnames(Airport_df)[2:5]
nombres_companias
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE)
)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Compania = nombres_companias,
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE)
)
estadisticas
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE)
)
estadisticas
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], moda)
)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media <- sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana <- sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda <- sapply(Airport_df[, 2:5], moda)
)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], function(x) moda(x))
)
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
moda <- function(x) {
tabla <- table(x)
moda <- names(tabla[tabla == max(tabla)])
if(length(moda) > 1) {
return(as.numeric(moda))
} else {
return(as.numeric(moda))
}
}
sapply(Airport_df[, 2:5], mean, na.rm = TRUE)
sapply(Airport_df[, 2:5], median, na.rm = TRUE)
sapply(Airport_df[, 2:5], moda)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], function(x) moda(x))
)
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], moda
)
estadisticas
nombres_companias <- colnames(Airport_df)[2:5]
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = sapply(Airport_df[, 2:5], moda)
)
sapply(Airport_df[, 2:5], moda)
Moda = sapply(Airport_df[, 2:5], moda)
View(moda)
Moda = sapply(Airport_df[, 2:5], moda)
Moda = sapply(Airport_df[, 2:5], moda)
Moda
View(moda)
# Calcular moda y asegurar que el resultado sea uniforme
moda_resultados <- lapply(Airport_df[, 2:5], moda)
moda_combinada <- sapply(moda_resultados, function(x) {
if(length(x) > 1) {
paste(x, collapse = ", ")
} else {
x
}
})
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = moda_combinada
)
estadisticas
# Calcular moda y asegurar que el resultado sea uniforme
moda_resultados <- lapply(Airport_df[, 2:5], moda)
moda_combinada <- sapply(moda_resultados, function(x) {
if(length(x) > 1) {
paste(x, collapse = ", ")
} else {
x
}
})
moda_combinada
# Crear una tabla para las estadísticas utilizando los nombres de las columnas
estadisticas <- data.frame(
Media = sapply(Airport_df[, 2:5], mean, na.rm = TRUE),
Mediana = sapply(Airport_df[, 2:5], median, na.rm = TRUE),
Moda = moda_combinada
)
estadisticas
